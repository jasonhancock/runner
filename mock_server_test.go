// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package runner

import (
	"sync"
)

var (
	lockServerMockRun  sync.RWMutex
	lockServerMockStop sync.RWMutex
)

// Ensure, that ServerMock does implement Server.
// If this is not the case, regenerate this file with moq.
var _ Server = &ServerMock{}

// ServerMock is a mock implementation of Server.
//
//     func TestSomethingThatUsesServer(t *testing.T) {
//
//         // make and configure a mocked Server
//         mockedServer := &ServerMock{
//             RunFunc: func() error {
// 	               panic("mock out the Run method")
//             },
//             StopFunc: func() error {
// 	               panic("mock out the Stop method")
//             },
//         }
//
//         // use mockedServer in code that requires Server
//         // and then make assertions.
//
//     }
type ServerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func() error

	// StopFunc mocks the Stop method.
	StopFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// Run calls RunFunc.
func (mock *ServerMock) Run() error {
	if mock.RunFunc == nil {
		panic("ServerMock.RunFunc: method is nil but Server.Run was just called")
	}
	callInfo := struct {
	}{}
	lockServerMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockServerMockRun.Unlock()
	return mock.RunFunc()
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedServer.RunCalls())
func (mock *ServerMock) RunCalls() []struct {
} {
	var calls []struct {
	}
	lockServerMockRun.RLock()
	calls = mock.calls.Run
	lockServerMockRun.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *ServerMock) Stop() error {
	if mock.StopFunc == nil {
		panic("ServerMock.StopFunc: method is nil but Server.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockServerMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockServerMockStop.Unlock()
	return mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedServer.StopCalls())
func (mock *ServerMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockServerMockStop.RLock()
	calls = mock.calls.Stop
	lockServerMockStop.RUnlock()
	return calls
}
